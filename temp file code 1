import _ from "lodash";

const originalData = {
  letterOfCreditHeaderDetailsELC: {
    amendmentDetails: { count: 12 },
    internalDataDetailsELC: { count: 22 },
    generalELCDetails: { count: 37 },
    shipmentDetailsELC: { count: 13 },
    insuranceDetails: { count: 4 },
    goodsDescriptionELC: { count: 2 },
    documentsRequiredELC: { count: 3 },
    otherTermsAndConditionsELC: { count: 12 },
    bankInstructionsELC: { count: 6 },
    filimitBookingDetails: { count: 3 },
  },
};

const updatedData = {
  letterOfCreditHeaderDetailsELC: {
    amendmentDetails: { count: 15 }, // Changed
    internalDataDetailsELC: { count: 22 },
    generalELCDetails: { count: 40 }, // Changed
    shipmentDetailsELC: { count: 13 },
    insuranceDetails: { count: 4 },
    goodsDescriptionELC: { count: 2 },
    documentsRequiredELC: { count: 3 },
    otherTermsAndConditionsELC: { count: 12 },
    bankInstructionsELC: { count: 8 }, // Changed
    filimitBookingDetails: { count: 3 },
  },
};

// Function to compare two nested objects and log changes
function compareObjects(obj1, obj2, path = "") {
  const differences = [];
  for (const key in obj1) {
    if (obj1.hasOwnProperty(key)) {
      const currentPath = path ? `${path}.${key}` : key;

      if (_.isObject(obj1[key]) && obj2[key]) {
        // Recursive comparison for nested objects
        differences.push(...compareObjects(obj1[key], obj2[key], currentPath));
      } else if (!_.isEqual(obj1[key], obj2[key])) {
        // Log differences
        differences.push({
          path: currentPath,
          originalValue: obj1[key],
          updatedValue: obj2[key],
        });
      }
    }
  }

  // Check for new keys in obj2 not present in obj1
  for (const key in obj2) {
    if (obj2.hasOwnProperty(key) && !obj1.hasOwnProperty(key)) {
      const currentPath = path ? `${path}.${key}` : key;
      differences.push({
        path: currentPath,
        originalValue: undefined,
        updatedValue: obj2[key],
      });
    }
  }

  return differences;
}

// Compare the objects
const differences = compareObjects(originalData, updatedData);

console.log("Changes detected:", differences);