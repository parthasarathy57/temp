import React, { useState } from 'react';
import { render, fireEvent } from '@testing-library/react';

// Mock Component
const AmendmentComponent = () => {
  const [fieldsDisabled, setFieldsDisabled] = useState(false);
  const [cancellationRequestError, setCancellationRequestError] = useState<string | undefined>(undefined);
  const [currentFields, setCurrentFields] = useState({
    amendmentType: { value: '' },
    cancellationRequest: { value: '' },
  });

  const handleAmendment = (event: any) => {
    if (event.cancellationRequest?.value) {
      setFieldsDisabled(true);
      setCancellationRequestError(undefined);
      setCurrentFields((prev) => ({
        ...prev,
        amendmentType: { value: event.amendmentType?.value },
        cancellationRequest: { value: event.cancellationRequest?.value },
      }));
    } else {
      setFieldsDisabled(false);
      setCancellationRequestError(undefined);
      setCurrentFields((prev) => ({
        ...prev,
        amendmentType: { value: event.amendmentType?.value },
        cancellationRequest: { value: event.cancellationRequest?.value },
      }));
    }
  };

  return (
    <div>
      <button
        data-testid="test-button"
        onClick={() =>
          handleAmendment({
            amendmentType: { value: 'Amendment A' },
            cancellationRequest: { value: 'Request 123' },
          })
        }
      >
        Trigger HandleAmendment
      </button>
      <div data-testid="fields-disabled">{fieldsDisabled ? 'true' : 'false'}</div>
      <div data-testid="cancellation-request-error">{cancellationRequestError || 'undefined'}</div>
      <div data-testid="current-fields">
        {JSON.stringify(currentFields, null, 2)}
      </div>
    </div>
  );
};

// Test
describe('AmendmentComponent', () => {
  it('should update fields and disable the form when cancellationRequest has a value', () => {
    const { getByTestId } = render(<AmendmentComponent />);

    const button = getByTestId('test-button');
    fireEvent.click(button);

    const fieldsDisabled = getByTestId('fields-disabled');
    const cancellationRequestError = getByTestId('cancellation-request-error');
    const currentFields = getByTestId('current-fields');

    expect(fieldsDisabled.textContent).toBe('true');
    expect(cancellationRequestError.textContent).toBe('undefined');
    expect(currentFields.textContent).toContain('"amendmentType": {"value": "Amendment A"}');
    expect(currentFields.textContent).toContain('"cancellationRequest": {"value": "Request 123"}');
  });
});