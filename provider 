import { renderHook, act } from '@testing-library/react';
import { useState } from 'react';

// Mock function based on the provided code
const useHandleAmendment = () => {
  const [fieldsDisabled, setFieldsDisabled] = useState(false);
  const [cancellationRequestError, setCancellationRequestError] = useState<string | undefined>(undefined);
  const [currentFields, setCurrentFields] = useState({
    amendmentType: { value: '' },
    cancellationRequest: { value: '' },
  });

  const handleAmendment = (event: any) => {
    if (event.cancellationRequest?.value) {
      setFieldsDisabled(true);
      setCancellationRequestError(undefined);
      setCurrentFields((prev) => {
        const res = {
          ...prev,
          amendmentType: { value: event.amendmentType?.value },
          cancellationRequest: { value: event.cancellationRequest?.value },
        };
        return res;
      });
    } else {
      setFieldsDisabled(false);
      setCancellationRequestError(undefined);
      setCurrentFields((prev) => {
        const res = {
          ...prev,
          amendmentType: { value: event.amendmentType?.value },
          cancellationRequest: { value: event.cancellationRequest?.value },
        };
        return res;
      });
    }
  };

  return { fieldsDisabled, cancellationRequestError, currentFields, handleAmendment };
};

describe('handleAmendment', () => {
  it('should update fields and disable the form when cancellationRequest has a value', () => {
    const { result } = renderHook(() => useHandleAmendment());

    const event = {
      amendmentType: { value: 'Amendment A' },
      cancellationRequest: { value: 'Request 123' },
    };

    act(() => {
      result.current.handleAmendment(event);
    });

    expect(result.current.fieldsDisabled).toBe(true);
    expect(result.current.cancellationRequestError).toBeUndefined();
    expect(result.current.currentFields).toEqual({
      amendmentType: { value: 'Amendment A' },
      cancellationRequest: { value: 'Request 123' },
    });
  });

  it('should not disable fields and update them when cancellationRequest is undefined', () => {
    const { result } = renderHook(() => useHandleAmendment());

    const event = {
      amendmentType: { value: 'Amendment B' },
      cancellationRequest: { value: '' },
    };

    act(() => {
      result.current.handleAmendment(event);
    });

    expect(result.current.fieldsDisabled).toBe(false);
    expect(result.current.cancellationRequestError).toBeUndefined();
    expect(result.current.currentFields).toEqual({
      amendmentType: { value: 'Amendment B' },
      cancellationRequest: { value: '' },
    });
  });
});



